# -*- coding: utf-8 -*-
"""Final_rotate number string.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T2TawgtNlNfoh24riPG9vkWzoqOWegz8
"""

import os
import cv2
from scipy import ndimage
from cv2 import ximgproc
import glob as gb


def FLD(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    ret, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    edges = cv2.Canny(gray, 50, 150, apertureSize=3)

    # Create default Fast Line Detector class
    fld = cv2.ximgproc.createFastLineDetector()

    # Get line vectors from the image
    lines = fld.detect(edges)
    if lines is not None:
        x1, y1, x2, y2 = lines[0][0]
        rotate_angle = cv2.fastAtan2((y2 - y1), (x2 - x1)) - 90
        line_on_image = fld.drawSegments(image, lines)  # draw founded red lines on the original image
    else:  # "lines is None" means this image don't need to be rotated
        line_on_image = 0
        rotate_angle = 0

    return thresh, line_on_image, rotate_angle


def rotate_number_string_batch(input_path, output_path):
    for filename in os.listdir(input_path):
        img = cv2.imread(r'%s' % (input_path + "/" + filename))  # load image
        thresh, line_on_image, rotate_angle = FLD(img)  # line detect
        rotate_img = ndimage.rotate(thresh, rotate_angle, cval=255.0)  # rotate image

        new_path = output_path + '/' + filename
        cv2.imwrite(new_path, rotate_img)


def rotate_number_string(image, name):
    img = image
    thresh, line_on_image, rotate_angle = FLD(img)  # line detect
    rotate_img = ndimage.rotate(thresh, rotate_angle, cval=255.0)  # rotate image

    new_path = SAVE_PATH + '/' + name + ".png"
    cv2.imwrite(new_path, rotate_img)
    return rotate_img


LOAD_PATH = './result/principal_1_detected_images_to_rotate'
SAVE_PATH = './result/principal_2_rotated_images_to_cut'


def rotate():
    img_path = gb.glob(SAVE_PATH + '/*.png')
    for img_file in img_path:
        os.remove(img_file)
    if not os.path.exists(SAVE_PATH):
        os.mkdir(SAVE_PATH)
    rotate_number_string_batch(LOAD_PATH, SAVE_PATH)
