# -*- coding: utf-8 -*-
"""create_database.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgJrrz_njgVpm-bZCn-aLSyyHYbnaZ9k
"""

import xml.etree.ElementTree as ET
import os
from PIL import Image
import os

def xml_data(xml_path):
    '''
    This function is to retrive data from .xml structure
    xml_path is the xml file path, we can retrive the data from xml by this function. It will be stored as a list

    '''
    tree = ET.parse(xml_path) 
    root = tree.getroot()
    img_name=os.path.split(xml_path)[1]
    #img_path=os.path.split(xml_path)[0]
    labels=[]
    xmins=[]
    ymins=[]
    xmaxs=[]
    ymaxs=[]
    
    for child in root:
        # img_path=img_name + str(child.text)
        if child.tag == 'object':
            for c in child:
                if c.tag == 'name':
                    label = c.text
                    labels.append(label) 
                elif c.tag == 'bndbox':
                    for s in c:
                        if s.tag == 'xmin':
                            xmin= s.text
                            xmins.append(xmin)
                        elif s.tag == 'ymin':
                            ymin= s.text
                            ymins.append(ymin)
                        elif s.tag == 'xmax':
                            xmax= s.text
                            xmaxs.append(xmax)
                        elif s.tag == 'ymax':
                            ymax= s.text
                            ymaxs.append(ymax)
    info=[]
    for i in range(len(labels)):
        n=[labels[i],xmins[i],ymins[i],xmaxs[i],ymaxs[i]]
        info.append(n)
    return info

def mkdir(path):
    '''
    to check if the folder is already exist, if not, create a new one.
    
    '''
    folder = os.path.exists(path)
 
    if not folder:                  
        os.makedirs(path)            #makedirs: This path will be created if the path does not exist when creating the file
        print( "---  new folder...  ---")
        print( "---  OK  ---")
    else:
        print ("---  There is this folder!  ---")

def save_cropped_img(xml_path):
    '''
    save cropped img (labeled images)
    if you meet encoding problem like cant use '.jpg, .png'
    it is a problem of your environment, check readme.txt
    if you see some chinese, dont care about it, not so important. Just to remind myself the details.
    
    '''
    files=os.listdir(os.path.split(xml_path)[0]) 
    xml_name=os.path.split(xml_path)[1].split('.')[0]
    
    label=['0','1','2','3','4','5','6','7','8','9','0.','1.','2.','3.','4.','5.','6.','7.','8.','9.','.0','.1','.2','.3','.4','.5','.6','.7','.8','.9']
    for i in files[1:]: #it from 1 to the others cause I have a hidden file in my folder, you can remove it
        type_name=os.path.split(i)[1].split('.')[1]
        
        if type_name == 'png':
            file_name=os.path.split(i)[1]
            img_name = file_name.split('.')[0]#得到图片的名字，没有后缀
            
            if img_name == xml_name: #提取图片左边和标签信息，img_name是相对应的.xml文件的图片名字。 
                img = Image.open(os.path.split(xml_path)[0] + '/'+file_name)
                info = xml_data(xml_path)
                for j in info:
                    left, top, right, bottom = int(j[1]),int(j[2]),int(j[3]),int(j[4])
                    #print('£££££££££££££££',j)
                    original_pic_name=j[0]
                    replace_point=original_pic_name.replace(".", "P")
                    if  original_pic_name in label:
                        save_name = replace_point
                        #print('img_name',save_name)
                        img_save_path=lab_F_path+save_name+'/' #将图片存在对应的文件夹里
                        #print(img_save_path)
                    else:
                        save_name = original_pic_name
                        img_save_path='../data/labeled_data/str/'
                        
                    im = img.crop((left, top, right, bottom))
                    n=len(os.listdir(img_save_path))
                    im.save(img_save_path+save_name+'-Img%s'%n +'.png')
    print('finish')



"""# processing xml files"""

# the folder where we stored original data(maps) and its corresponding .xml file
F=os.listdir('../data/image')

# save cropped images based on its label (0,1,2...)
labeded_F_path='../data/labeled_data/'

# create new folders to save cropped(labeled) images
# label explaination:'P_1'=='.1';'1_P'=='1.'
label=['0','1','2','3','4','5','6','7','8','9','0','P0','P1','P2','P3','P4','P5','P6','P7','P8','P9','0P','1P','2P','3P','4P','5P','6P','7P','8P','9P','str']
label_folder=[]
for i in label:
    mkdir(lab_F_path+i)
    label_folder.append(lab_F_path+i)

"""### F  # check F, if you dont have '.DS_Store', change 'for f in F[1:]:'  to 'for f in F:'"""



#the folder to save the original images and cropped images
for f in F[1:]:
    if '.png' in f  or '.xml'  in f: 
        type_name=os.path.split(f)[1].split('.')[1]
        if type_name == 'xml':
            xml_path='../data/image/'+ f
            save_cropped_img(xml_path)
