# -*- coding: utf-8 -*-
"""Final_resize digits(for digits waiting for recognition) .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nckNr9KmiGMpFToaWSlLVrjj6oNSyJR1
"""

from PIL import Image
import cv2
import os
import glob as gb


def resize_digits_batch(input_path, output_path):
    for filename in os.listdir(input_path):
        img_bin = cv2.imread(r'%s' % (input_path + "/" + filename), 0)  # Read the gray image

        height = img_bin.shape[0]
        length = img_bin.shape[1]

        # the length and height of the input image for CNN is 28
        a = 28 / height
        b = 28 / length
        if a < b:
            img_resize = cv2.resize(img_bin, (int(length * a), int(height * a)), )
        else:
            img_resize = cv2.resize(img_bin, (int(length * b), int(height * b)), )
        img_resize2 = Image.fromarray(img_resize)

        new_height = img_resize.shape[0]
        new_length = img_resize.shape[1]
        blank_image = Image.new('RGB', (28, 28), (255, 255, 255))  # create a blank image of the size of 28*28
        region = img_resize2.crop((0, 0, new_length, new_height))  # copy the resized image
        x = 28 / 2 - new_length / 2
        y = 28 / 2 - new_height / 2
        blank_image.paste(region, (int(x), int(y)))  # paste the resized image on the blank image

        new_path = output_path + filename
        blank_image.save(new_path)

def resize_digits(image, name):

        img_bin = image  # Read the gray image

        height = img_bin.shape[0]
        length = img_bin.shape[1]

        # the length and height of the input image for CNN is 28
        a = 28 / height
        b = 28 / length
        if a < b:
            img_resize = cv2.resize(img_bin, (int(length * a), int(height * a)), )
        else:
            img_resize = cv2.resize(img_bin, (int(length * b), int(height * b)), )
        img_resize2 = Image.fromarray(img_resize)

        new_height = img_resize.shape[0]
        new_length = img_resize.shape[1]
        blank_image = Image.new('RGB', (28, 28), (255, 255, 255))  # create a blank image of the size of 28*28
        region = img_resize2.crop((0, 0, new_length, new_height))  # copy the resized image
        x = 28 / 2 - new_length / 2
        y = 28 / 2 - new_height / 2
        blank_image.paste(region, (int(x), int(y)))  # paste the resized image on the blank image

        new_path = SAVE_PATH + name + '.png'
        blank_image.save(new_path)
        return blank_image

# how to use
# for example
LOAD_PATH = 'F:/projet_S5/pytorch-captcha-recognition/dataset/train_pre'
SAVE_PATH = 'F:/projet_S5/pytorch-captcha-recognition/dataset/train/'


def resize():
    img_path = gb.glob(SAVE_PATH + '/*.png')
    for img_file in img_path:
        os.remove(img_file)
    if not os.path.exists(SAVE_PATH):
        os.mkdir(SAVE_PATH)
    resize_digits_batch(LOAD_PATH, SAVE_PATH)
